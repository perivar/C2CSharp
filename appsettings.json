{
    "C2CS": {
        "Rules": {
            "add": [
                {
                    "name": "char opt. *",
                    "pattern": "char\\s*\\*?",
                    "replacement": "string "
                },
                {
                    "name": "signedchar",
                    "pattern": "signedchar",
                    "replacement": "sbyte"
                },
                {
                    "name": "longlong",
                    "pattern": "longlong",
                    "replacement": "long"
                },
                {
                    "name": "shortint",
                    "pattern": "shortint",
                    "replacement": "short"
                },
                {
                    "name": "signedint",
                    "pattern": "signedint",
                    "replacement": "int"
                },
                {
                    "name": "signedlong",
                    "pattern": "signedlong",
                    "replacement": "long"
                },
                {
                    "name": "signedlonglong",
                    "pattern": "signedlonglong",
                    "replacement": "long"
                },
                {
                    "name": "signedshort",
                    "pattern": "signedshort",
                    "replacement": "short"
                },
                {
                    "name": "unsignedchar",
                    "pattern": "unsignedchar",
                    "replacement": "byte"
                },
                {
                    "name": "unsignedint",
                    "pattern": "unsignedint",
                    "replacement": "uint"
                },
                {
                    "name": "unsignedlong",
                    "pattern": "unsignedlong",
                    "replacement": "ulong"
                },
                {
                    "name": "unsignedlonglong",
                    "pattern": "unsignedlonglong",
                    "replacement": "ulong"
                },
                {
                    "name": "unsignedshort",
                    "pattern": "unsignedshort",
                    "replacement": "ushort"
                },
                {
                    "name": "void*",
                    "pattern": "void\\s*\\*",
                    "replacement": "void"
                },
                {
                    "name": "wchar_t *",
                    "pattern": "wchar_t\\s*\\*",
                    "replacement": "string"
                },
                {
                    "name": "wchar_t",
                    "pattern": "wchar_t",
                    "replacement": "char"
                },
                {
                    "name": "size_t opt. *",
                    "pattern": "size_t\\s*\\*?",
                    "replacement": "uint "
                },
                {
                    "name": "date_t opt. *",
                    "pattern": "date_t\\s*\\*?",
                    "replacement": "DateTime "
                },
                {
                    "name": "uint8_t",
                    "pattern": "uint8_t",
                    "replacement": "byte"
                },
                {
                    "name": "int8_t",
                    "pattern": "uint8_t",
                    "replacement": "sbyte"
                },
                {
                    "name": "uint16_t",
                    "pattern": "uint16_t",
                    "replacement": "ushort"
                },
                {
                    "name": "int16_t",
                    "pattern": "int16_t",
                    "replacement": "short"
                },
                {
                    "name": "uint32_t",
                    "pattern": "uint32_t",
                    "replacement": "uint"
                },
                {
                    "name": "int32_t",
                    "pattern": "int32_t",
                    "replacement": "int"
                },
                {
                    "name": "free",
                    "pattern": "^\\s+free",
                    "replacement": "// not supported: free"
                },
                {
                    "name": "pointer increment",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]*)\\+{2}\\s*=\\s*(?<value>[a-zA-Z0-9_\\.\\[\\]]*)\\s*;",
                    "replacement": "writer.Write(${value}); // ${var}"
                },
                {
                    "name": "ref object",
                    "pattern": "\\b(?!(?:long|ulong|int|uint|short|ushort|byte|sbyte)\\b)(?<var>[a-zA-Z0-9_]+)\\s+(?:\\*\\*?)(?<letter>[a-zA-Z])",
                    "replacement": "ref ${var} ${letter}"
                },
                {
                    "name": "ref builtin",
                    "pattern": "(?<var>long|ulong|int|uint|short|ushort|byte|sbyte)\\s+(?:\\*)(?<letter>[a-zA-Z])",
                    "replacement": "${var} ${letter}"
                },
                {
                    "name": "pointer **",
                    "pattern": "\\s+(?:\\*\\*)([a-zA-Z])",
                    "replacement": " ${1}"
                },
                {
                    "name": "begin array errors",
                    "pattern": "^\\[\\]\\s",
                    "replacement": ""
                },
                {
                    "name": "ref",
                    "pattern": "(?:&)([a-zA-Z])",
                    "replacement": "ref ${1}"
                },
                {
                    "name": "pointer cast",
                    "pattern": "\\(([^\\s]+)\\*\\)",
                    "replacement": "(${1})"
                },
                {
                    "name": "pointer cast 2",
                    "pattern": "\\(\\*([^\\s]+)\\)",
                    "replacement": "(${1})"
                },
                {
                    "name": "reference",
                    "pattern": "->([^\\s;\\.,]+)",
                    "replacement": ".${1}"
                },
                {
                    "name": "GetWord",
                    "pattern": "GetWord\\(\\s?([^\\)\\s]*)\\s*\\)\\s?;",
                    "replacement": "${1} = binaryReader.ReadInt16();"
                },
                {
                    "name": "GetByte",
                    "pattern": "GetByte\\(\\s?([^\\)\\s]*)\\s*\\)\\s?;",
                    "replacement": "${1} = binaryReader.ReadByte();"
                },
                {
                    "name": "malloc",
                    "pattern": "^\\s*(.*malloc)",
                    "replacement": "// not supported: ${1}"
                },
                {
                    "name": "calloc",
                    "pattern": "^\\s*(.*calloc)",
                    "replacement": "// not supported: ${1}"
                },
                {
                    "name": "enum vars",
                    "pattern": "(enum[\\ \\t\\r\\n]*)(?<type>[a-zA-Z_][a-zA-Z0-9_]*)[\\ \\t\\r\\n]*(?<name>[a-zA-Z_][a-zA-Z0-9_]*)[\\ \\t\\r\\n]*;",
                    "replacement": "${type} ${name};"
                },
                {
                    "name": "NULL",
                    "pattern": "NULL",
                    "replacement": "null"
                }
            ]
        }
    }
}