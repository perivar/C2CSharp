{
    "C2CS": {
        "Rules": {
            "add": [
                {
                    "name": "unsignedchar",
                    "pattern": "unsigned\\s?char",
                    "replacement": "byte"
                },
                {
                    "name": "unsignedint",
                    "pattern": "unsigned\\s?int",
                    "replacement": "uint"
                },
                {
                    "name": "unsignedlong",
                    "pattern": "unsigned\\s?long",
                    "replacement": "ulong"
                },
                {
                    "name": "unsignedlonglong",
                    "pattern": "unsigned\\s?long\\s?long",
                    "replacement": "ulong"
                },
                {
                    "name": "unsignedshort",
                    "pattern": "unsigned\\s?short",
                    "replacement": "ushort"
                },
                {
                    "name": "signedchar",
                    "pattern": "signed\\s?char",
                    "replacement": "sbyte"
                },
                {
                    "name": "longlong",
                    "pattern": "long\\s?long",
                    "replacement": "long"
                },
                {
                    "name": "shortint",
                    "pattern": "short\\s?int",
                    "replacement": "short"
                },
                {
                    "name": "signedint",
                    "pattern": "signed\\s?int",
                    "replacement": "int"
                },
                {
                    "name": "signedlong",
                    "pattern": "signed\\s?long",
                    "replacement": "long"
                },
                {
                    "name": "signedlonglong",
                    "pattern": "signed\\s?long\\s?long",
                    "replacement": "long"
                },
                {
                    "name": "signedshort",
                    "pattern": "signed\\s?short",
                    "replacement": "short"
                },
                {
                    "name": "char *",
                    "pattern": "char\\s*\\*",
                    "replacement": "string "
                },
                {
                    "name": "wchar_t *",
                    "pattern": "wchar_t\\s*\\*",
                    "replacement": "string"
                },
                {
                    "name": "wchar_t",
                    "pattern": "wchar_t",
                    "replacement": "char"
                },
                {
                    "name": "size_t",
                    "pattern": "size_t",
                    "replacement": "uint"
                },
                {
                    "name": "date_t",
                    "pattern": "date_t",
                    "replacement": "DateTime "
                },
                {
                    "name": "uint8_t",
                    "pattern": "uint8_t",
                    "replacement": "byte"
                },
                {
                    "name": "int8_t",
                    "pattern": "int8_t",
                    "replacement": "sbyte"
                },
                {
                    "name": "uint16_t",
                    "pattern": "uint16_t",
                    "replacement": "ushort"
                },
                {
                    "name": "int16_t",
                    "pattern": "int16_t",
                    "replacement": "short"
                },
                {
                    "name": "uint32_t",
                    "pattern": "uint32_t",
                    "replacement": "uint"
                },
                {
                    "name": "int32_t",
                    "pattern": "int32_t",
                    "replacement": "int"
                },
                {
                    "name": "bytestream2_get_byteu",
                    "pattern": "bytestream2_get_byteu\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadByte()"
                },
                {
                    "name": "bytestream2_get_byte",
                    "pattern": "bytestream2_get_byte\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadSByte()"
                },
                {
                    "name": "bytestream2_get_le16u(gb)",
                    "pattern": "bytestream2_get_le16u\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt16(ByteOrder.LittleEndian)"
                },
                {
                    "name": "bytestream2_get_le16(gb)",
                    "pattern": "bytestream2_get_le16\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt16(ByteOrder.LittleEndian)"
                },
                {
                    "name": "bytestream2_get_le32u(gb)",
                    "pattern": "bytestream2_get_le32u\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadUInt32(ByteOrder.LittleEndian)"
                },
                {
                    "name": "bytestream2_get_le32(gb)",
                    "pattern": "bytestream2_get_le32\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt32(ByteOrder.LittleEndian)"
                },
                {
                    "name": "bytestream2_get_be16u(gb)",
                    "pattern": "bytestream2_get_be16u\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt16(ByteOrder.BigEndian)"
                },
                {
                    "name": "bytestream2_get_be16(gb)",
                    "pattern": "bytestream2_get_be16\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt16(ByteOrder.BigEndian)"
                },
                {
                    "name": "bytestream2_get_be32u(gb)",
                    "pattern": "bytestream2_get_be32u\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadUInt32(ByteOrder.BigEndian)"
                },
                {
                    "name": "bytestream2_get_be32(gb)",
                    "pattern": "bytestream2_get_be32\\(&?[a-zA-Z_]+\\)",
                    "replacement": "reader.ReadInt32(ByteOrder.BigEndian)"
                },
                {
                    "name": "bytestream2_tell",
                    "pattern": "bytestream2_tell\\([&?[a-zA-Z_]+\\)",
                    "replacement": "reader.BaseStream.Position"
                },
                {
                    "name": "bytestream2_skip",
                    "pattern": "bytestream2_skip.?\\(&?[a-zA-Z_]+,\\s+(.*?)\\)",
                    "replacement": "reader.ReadBytes(${1})"
                },
                {
                    "name": "bytestream2_get_bytes_left",
                    "pattern": "bytestream2_get_bytes_left\\([&?[a-zA-Z_]+\\)",
                    "replacement": "reader.BaseStream.Length"
                },
                {
                    "name": "GetWord",
                    "pattern": "GetWord\\(\\s?([^\\)\\s]*)\\s*\\)\\s?;",
                    "replacement": "${1} = reader.ReadInt16();"
                },
                {
                    "name": "GetByte",
                    "pattern": "GetByte\\(\\s?([^\\)\\s]*)\\s*\\)\\s?;",
                    "replacement": "${1} = reader.ReadByte();"
                },
                {
                    "name": "reference",
                    "pattern": "->([^\\s;\\.,\\-]+)",
                    "replacement": ".${1}"
                },
                {
                    "name": "free",
                    "pattern": "^(\\s+)free\\s*\\((.*?)\\)\\s*;\\s*$",
                    "replacement": "${1}${2} = null;"
                },
                {
                    "name": "pointer increment",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\+{2}\\s*=\\s*(?<value>[a-zA-Z0-9_\\.\\[\\]\\&\\-\\+\\<\\>\\(\\)\\s\\,\\=\\*\\?\\:]*)",
                    "replacement": "${var}[xyz++] = ${value}"
                },
                {
                    "name": "pointer increment;",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\+{2}\\s*;",
                    "replacement": "${var}[xyz++];"
                },
                {
                    "name": "pointer set",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\s+=",
                    "replacement": "${var}[xyz] ="
                },
                {
                    "name": "pointer decrement",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\s+-=",
                    "replacement": "${var}[xyz] -="
                },
                {
                    "name": "pointer percentage",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\s+%",
                    "replacement": "${var}[xyz] %"
                },
                {
                    "name": "equals pointer",
                    "pattern": "\\*(?<var>[a-zA-Z0-9_]+)\\s*;",
                    "replacement": "${var}[xyz];"
                },
                {
                    "name": "ref object",
                    "pattern": "\\b(?<!\\.|\\+\\s|\\-\\s|\\=\\s|\\W\\()(?!(?:long|ulong|int|uint|short|ushort|byte|sbyte|\\d+)\\b)(?<var>[a-zA-Z0-9_]+)\\s+(?:\\*\\*?)\\s*(?<letter>[a-zA-Z])",
                    "replacement": "ref ${var} ${letter}"
                },
                {
                    "name": "ref object errors",
                    "pattern": "(?<space>^\\s*)ref\\s+(?<value>[a-zA-Z0-9_\\.\\[\\]\\&\\-\\+\\<\\>\\(\\)\\s\\,\\=]*)\\s*;\\s*$",
                    "replacement": "${space}${value};"
                },
                {
                    "name": "ref builtin",
                    "pattern": "(?<var>long|ulong|int|uint|short|ushort|byte|sbyte)\\s+(?:\\*\\*?)\\s*(?<letter>[a-zA-Z])",
                    "replacement": "${var}[] ${letter}"
                },
                {
                    "name": "begin array errors",
                    "pattern": "^\\[\\]\\s",
                    "replacement": ""
                },
                {
                    "name": "address reference not starting with digit",
                    "pattern": "(?:&)(?!\\d)(?<value>[a-zA-Z0-9_]+)",
                    "replacement": "ref ${value}"
                },
                {
                    "name": "cast *",
                    "pattern": "\\(([^\\s]+)\\s*\\)",
                    "replacement": "(${1})"
                },
                {
                    "name": "* cast",
                    "pattern": "\\(\\*([^\\s]+)\\s*\\)",
                    "replacement": "(${1})"
                },
                {
                    "name": "malloc",
                    "pattern": "^\\s*(.*malloc)",
                    "replacement": "// not supported: ${1}"
                },
                {
                    "name": "calloc",
                    "pattern": "^\\s*(.*calloc)",
                    "replacement": "// not supported: ${1}"
                },
                {
                    "name": "enum vars",
                    "pattern": "(enum[\\ \\t\\r\\n]*)(?<type>[a-zA-Z_][a-zA-Z0-9_]*)[\\ \\t\\r\\n]*(?<name>[a-zA-Z_][a-zA-Z0-9_]*)[\\ \\t\\r\\n]*;",
                    "replacement": "${type} ${name};"
                },
                {
                    "name": "NULL",
                    "pattern": "NULL",
                    "replacement": "null"
                },
                {
                    "name": "bit calculations",
                    "pattern": "\\(\\s*(?<var>[a-zA-Z_][a-zA-Z0-9_]*)(?:&)(?<calc>(0x)(\\d*))\\s*\\)",
                    "replacement": "( (${var} ${calc} != 0) )"
                }
            ]
        }
    }
}